#!/bin/sh

# alias ipecho.net="curl -s https://ipecho.net/plain; echo"
# alias canhazip.com="curl -s https://canhazip.com"

# Use 'python -mjson.tool' to format json and grep value if jq is not installed?

# curl -s https://ipinfo.io/<external-ip>
# ipinfo.io: ip, hostname, city, region, country, loc, postal, org
#alias ipinfo.io='curl -sSL -H "Accept: application/json" https://ipinfo.io/json | jq -r .ip'

# Does not support HTTPS?
# curl -s https://ifconfig.me/<external-ip>
# iconfig.me: ..., port, remote_host, user_agent, ...
#alias ifconfig.me="curl -s https://ifconfig.me/all.json | jq -r .ip_addr"

# Script source name
NET_BIN="$(basename -- "$0")"

# Default script argument
NET_DEFAULT_ARG="public"

NET_USAGE_STR="usage: ${NET_BIN:-net} [all | geo | flush | ifactive | local | public]"

# shellcheck disable=SC1090
. "$HOME"/bin/hasfunc

if ! hasfunc net; then
  net() {
    # [ $# -gt 1 ] && die "$*: too many arguments"
    if [ $# -eq 0 ]; then
      set -- "$NET_DEFAULT_ARG"
    fi
    func=
    # verbosity=0
    for arg in "$@"; do
      if [ -n "$func" ]; then
        die "$arg: too many functions, already registered '$func'"
      fi
      case "$arg" in
        '' | all) func=net_ips ;;
        f | flush) func=net_flush ;;
        # g | geo) func=net_geoip ;;
        i | ifactive) func=net_ifactive ;;
        l | local) func=net_ip_local ;;
        p | public) func=net_ip_public ;;
        -h | --help) usage ;;
        # -v | --verbose) verbosity=$((verbosity + 1)) ;;
        *) usage "$arg: unknown argument" ;;
      esac
    done
    # if [ "$verbosity" -ne 0 ]; then
    #   NET_VERBOSE=1
    # fi
    if ! hasfunc "$func"; then
      die "$func: undefined function"
    fi
    if [ -n "$func" ]; then
      "$func"
    fi
  }

  net_ips() {
    # List all local IPs
    ifconfig -a |
      grep -o 'inet6\? \(addr:\)\?\s\?\(\(\([0-9]\+\.\)\{3\}[0-9]\+\)\|[a-fA-F0-9:]\+\)' |
      awk '{ sub(/inet6? (addr:)? ?/, ""); print }'
  }

  # net_geoip() {
  #   geoiplookup "$@"
  # }

  net_flush() {
    if [ "$(uname -s)" = "Darwin" ]; then
      # Flush Directory Service cache (macOS)
      dscacheutil -flushcache && killall -HUP mDNSResponder
      return $?
    fi
    if hash nscd 2>/dev/null; then
      # Name Service Caching Daemon
      # Use -I to clear local DNS cache for all users
      nscd -i hosts
      return $?
    fi
    return 2
    # Ubuntu: sudo service dns-clean restart
  }

  # Show active network interfaces
  net_ifactive() {
    ifconfig | pcregrep -M -o '^[^\t:]+:([^\n]|\n\t)*status: active'
  }

  net_ip_local() {
    ipconfig getifaddr en0
  }

  net_ip_public() {
    dig +short myip.opendns.com @resolver1.opendns.com
  }

  usage() {
    if [ $# -ne 0 ]; then
      echo >&2 "$*"
      die "$NET_USAGE_STR"
    fi
    echo "$NET_USAGE_STR"
    exit 0
  }

  die() {
    echo >&2 "$*"
    exit 1
  }
fi

# shellcheck disable=SC2128
if [ "$NET_BIN" = net ]; then
  net "$@"
fi
